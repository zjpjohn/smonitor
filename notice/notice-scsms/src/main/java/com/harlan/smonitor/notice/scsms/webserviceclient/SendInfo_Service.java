
package com.harlan.smonitor.notice.scsms.webserviceclient;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import static com.harlan.smonitor.notice.scsms.webserviceclient.SendInfo_Service.SEND_SMS_URL;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "sendInfo", targetNamespace = "http://ws.sitech.com", wsdlLocation = "http://10.112.9.136:51000/esbWS/services/sendInfo?wsdl")
public class SendInfo_Service   extends Service{

    public static String SEND_SMS_URL= ResourceBundle.getBundle("config").getString("sendsms_service_url");

    private final static URL SENDINFO_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(SendInfo_Service.class.getName());

    static {



        URL url = null;
        try {
            URL baseUrl;
            baseUrl = SendInfo_Service.class.getResource(".");
            url = new URL(baseUrl, SEND_SMS_URL);
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: '"+SEND_SMS_URL+"', retrying as a local file");
            logger.warning(e.getMessage());
        }
        SENDINFO_WSDL_LOCATION = url;
    }

    public SendInfo_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SendInfo_Service() {
        super(SENDINFO_WSDL_LOCATION, new QName("http://ws.sitech.com", "sendInfo"));
    }

    /**
     * 
     * @return
     *     returns SendInfo
     */
    @WebEndpoint(name = "sendInfoHttpSoap11Endpoint")
    public SendInfo getSendInfoHttpSoap11Endpoint() {
        return super.getPort(new QName("http://ws.sitech.com", "sendInfoHttpSoap11Endpoint"), SendInfo.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SendInfo
     */
    @WebEndpoint(name = "sendInfoHttpSoap11Endpoint")
    public SendInfo getSendInfoHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(new QName("http://ws.sitech.com", "sendInfoHttpSoap11Endpoint"), SendInfo.class, features);
    }

}
